Para importar projetos no Eclipse, use o comando:
    File->Import->Projects from Folder or Archive; ou
    File->Import->Projects from Git.

Atenção! No curso foi utilizada a versão 9 do tomcat.

    A partir da versão 10 do tomcat foram efetuadas mudanças em sua 
    arquitetura, que impossibilitam o import de classes/interfaces do 
    pacote javax.*.

    Com isso, recomendamos que seja utilizada a versão 9 do tomcat, para 
    evitar problemas ao longo do curso.

Comandos no Windows para ver as portas abertas e os programas associados:
    Mostrar a lista de tarefas: 
        D:\>tasklist | findstr cmd

    Mostrar se a porta 8008 está em uso:
        netstat -abno | findstr 8080
            -a => Mostra todas as conexões e portas.
            -b => Mostra o executável envolvido na criação da conexão.
            -n => Exibe endereços e números de porta no formato numérico.
                Útil pra mostrar o IP ao invés do nome do host. E também
                evita de travar o terminal.
            -o => Exibe a ID de processo proprietário associado a cada conexão.

Ctrl + Shift + O => Comando no Eclipse para automatizar importação de pacotes.
Ctrl + M => Maximiza/Restaura a aba atual.
Ctrl + Shift + R => Janela para buscar algum recurso (arquivo)
Alt + Shift + Z => Atalho para "Surround with" em um bloco. Ajuda no try/catch.

Problemas de definição do JRE (a classe System não é localizada, por exemplo):
    Propriedades do Projeto -> Java Build Path -> Aba Libraries. 
        Lá você adapta a JRE que vai ser usada.
    Propriedades do Projeto -> Project Facets.
        Escolha a configuração apropriada para usar o Tomcat.

O objetivo foi substituir vários servlets por um único servlet que recebe as
requisições e as redireciona para classes específicas. (Mas por que criar 
classes que não estendem servlets, já que o método executa seria o mesmo
que service, doPost, doGet etc? Resposta: os métodos dos servlets retornam
void. Para flexibilizar o JSP que vai ser passado para o RequestDispatcher,
os métodos de ação poderiam retornar uma String com o JSP que será chamado).

Ao definir os links para os formulários .jsp, não coloque os parâmetros da
querystring na action do form. Ao invés disso, use campos ocultos com os 
parâmetros da querystring.

Até agora há 3 pacotes no curso:
    * Modelo
    * Servlet
    * Ações

Os dois últimos (Servlet e Ações) fazem parte da camada Controller. O servlet
único redireciona as requisições para as ações correspondentes.

As Ações tem dois comportamentos: ou definem o JSP que vai ser chamado, ou 
redireciona a requisição para outra URI na aplicação. Quem vai fazer qualquer
dos dois comportamentos será a Entrada Única dos servlets.

Preocupação: NUNCA mencionar diretamente qual JSP será carregado. Um meio de 
evitar que o navegador acesse os JSP diretamente é move-los para a pasta
WEB-INF (ela nunca fica acessível pelo navegador).

Para flexibilizar a instanciação do controlador, podemos usar a reflexão Java.
Graças às reflections, podemos instanciar dinamicamente as classes com:
    1) Definir uma interface comum para as ações (vamos chamar de Acao);
    2) Reflection: Class classe = Class.forName("caminho.do.pack.NomeClasse");
    3) Instanciação: Acao acao = (Acao)classe.newInstance();

Problema: Class.forName("classe").newInstance() é deprecated!!! 

Essa forma de criação de objetos é um Design Pattern chamado Command.

O curso menciona o padrão JAAS (Java Authentication and Autorization Service).
No entanto, o JAAS não é muito usado. Há configurações no web.xml que tem a
ver com o JAAS (login-config, security-role, security-constraint etc.).

Usar o comando a seguir na ação Login não via funcionar:
		if (usuario != null) {
			request.setAttribute("usuario", usuario);
			return "redirect:entrada?acao=ListaEmpresas";
		} else {
			return "redirect:entrada?acao=LoginForm";
		}

Isso porque o atributo "usuario" vive dentro da requisição, que desaparece
logo que o redirecionamento acontece. O redirecionamento gera uma requisição
nova, sem o atributo.

O Tomcat faz algumas coisas quando recebe uma requisição:
    1) Cria um cookie chamado JSESSIONID, que fica armazenado no cliente;
    2) Cria um objeto HttpSession, que fica armazenado no servidor;
    3) Insere o JSESSIONID e o HttpSession em um HashMap para consulta futura.

A Expression Language (EL) do JSP busca as variáveis em diferentes escopos.
Por exemplo, se a tag EL não encontrar a variável usuarioLogado na requisição,
ela procura a variável na sessão.

Use navegação anônima, para que os cookies criados sejam destruídos ao fechar
a janela do navegador. Isso dispensa a implementação do logout, por ora.

Como colocar um usuário na HttpSession (nome do atributo será usuarioLogado):
    HttpSession sessao = request.getSession();
    sessao.setAttribute("usuarioLogado", usuario);

Neste exemplo, condicionamos a exibição da listagem de empresas na ação 
ListaEmpresas à existência de um usuário logado. Mas fazer isso em todas as
ações é pouco eficiente.

Uma alternativa é fazer a verificação do usuário no controlador de entrada 
única. Nessa situação, você precisa distinguir quais ações são protegidas
e quais são liberadas para acesso. No entanto, esta alternativa força a 
recompilação do controlador de entrada única.

Para incluir conteúdo externo nas JSP, use a tag <c:import url="path">.
Seria interessante usar as JSP como templates do Django. Link interessante:
https://stackoverflow.com/questions/490390/jsp-template-inheritance
